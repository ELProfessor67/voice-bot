old webhook = https://voicebot-9axa.onrender.com/incoming



const EventEmitter = require('events');
const { Buffer } = require('node:buffer');
const fetch = require('node-fetch');
const PlayHT = require("playht");

class TextToSpeechService extends EventEmitter {
  constructor(config) {
    // super();
    // this.config = config;
    // this.config.voiceId ||= process.env.VOICE_ID;
    // this.nextExpectedIndex = 0;
    // this.speechBuffer = {};


    PlayHT.init({
      apiKey: process.env.PLAYHT_API_KEY,
      userId: process.env.PLAYHT_USER_ID,
    });

  }

  async generate(gptReply, interactionCount) {
    const { partialResponseIndex, partialResponse } = gptReply;
    console.log({ partialResponseIndex, partialResponse });
    // if (!partialResponse) { return; }

    try {
      // configure your stream
      const streamingOptions = {
        // must use turbo for the best latency
        voiceEngine: "PlayHT2.0-turbo",
        // this voice id can be one of our prebuilt voices or your own voice clone id, refer to the`listVoices()` method for a list of supported voices.
        voiceId:
          "s3://voice-cloning-zero-shot/d9ff78ba-d016-47f6-b0ef-dd630f59414e/female-cs/manifest.json",
        // you can pass any value between 8000 and 48000, 24000 is default
        sampleRate: 44100,
        // the generated audio encoding, supports 'raw' | 'mp3' | 'wav' | 'ogg' | 'flac' | 'mulaw'
        outputFormat: 'mp3',
        // playback rate of generated speech
        speed: 1,
      };

      // start streaming!
      const text = "Hey, this is Jennifer from Play. Please hold on a moment, let me just um pull up your details real quick."
      const stream = await PlayHT.stream(text, streamingOptions);

      stream.on("data", (chunk) => {
        console.log(chunk,'===========>>>>playht');
      });

      //   const outputFormat = 'ulaw_8000';
      //   const response = await fetch(
      //     `https://api.elevenlabs.io/v1/text-to-speech/${this.config.voiceId}/stream?output_format=${outputFormat}&optimize_streaming_latency=3`,
      //     {
      //       method: 'POST',
      //       headers: {
      //         'xi-api-key': process.env.XI_API_KEY,
      //         'Content-Type': 'application/json',
      //         accept: 'audio/wav',
      //       },
      //       // TODO: Pull more config? https://docs.elevenlabs.io/api-reference/text-to-speech-stream
      //       body: JSON.stringify({
      //         model_id: process.env.XI_MODEL_ID,
      //         text: partialResponse,
      //       }),
      //     }
      //   );
      //   const audioArrayBuffer = await response.arrayBuffer();
        this.emit('speech', partialResponseIndex, Buffer.from(audioArrayBuffer).toString('base64'), partialResponse, interactionCount);
    } catch (err) {
      console.error('Error occurred in TextToSpeech service');
      console.error(err);
    }
  }
}

module.exports = { TextToSpeechService };



new data 

const streamFromStream = await PlayHT.stream(partialResponse, {
        voiceEngine: 'PlayHT2.0-turbo',
        voiceId: 's3://voice-cloning-zero-shot/d9ff78ba-d016-47f6-b0ef-dd630f59414e/female-cs/manifest.json',
        outputFormat: 'mulaw',
        sampleRate: 10000,
      });

      streamFromStream.on('data', (data) => {
        console.log(data);
        this.emit('speech', partialResponseIndex, data.toString('base64'), partialResponse, interactionCount);
      });



const { StreamService } = require('./stream-service');
const exportWs = require('../app');

const streamService = new StreamService(exportWs);



1. Please act as a hotel receptionist for 365 ai tech. Start with "Hi , how can i assist you".
2. Keep your answers very short and crisp.
3. In case if the answer requires a function call, Please always check the information required. All information required is mandatory and we cannot make a function call without any pending information.
      - 1st you need to check if information required is provided or not. If not then 1st ask the required information.
      - 2nd if the required information is provided then only respond with function call json format provided in the Answer Column. And do not add any other additional text.
4. If you have asked if any other support required and user responds with nothing else required, then respond only with json {"closeCall":"yes"} . Do not add any other additional text.
5. If questions are simple please always send text in string don't try to make always json
6. attached is a set of questions with respective answers or function calls in json format please add always correct json formate don't use json which gives errors on parse 